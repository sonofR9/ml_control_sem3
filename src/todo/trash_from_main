
// template <int N, StateSpaceFunction<N> MS, ConjugateFunction<N, N> CS,
//           FindMaximumFunction<N, 2> FM>
// using PontryaginSolver = decltype(SolveUsingPontryagin<2, N, MS, CS, FM>);

void testGradientDescent() {
  const StaticTensor<5> qMin{-3, -3, -3, -3, -3};
  const StaticTensor<5> qMax{30, 30, 30, 30, 30};
  // func = (q0-5)^2 + (q1)^2 + (q2)^2 + (q3-5)^2 + (q4-10)^2
  auto grad = [](const StaticTensor<5>& q) -> StaticTensor<5> {
    return {2 * (q[0] - 5), 2 * q[1], 2 * q[2], 2 * (q[3] - 5),
            2 * (q[4] - 10)};
  };
  auto functional = [](const StaticTensor<5>& q) -> double {
    return std::pow(q[0] - 5, 2) + std::pow(q[1], 2) + std::pow(q[2], 2) +
           std::pow(q[3] - 5, 2) + std::pow(q[4] - 10, 2);
  };
  const auto& res{GradientDescent(qMin, qMax, functional, grad, 0.5, 1e4)};
  std::cout << "GradientDescent: [" << res << "] True: [5 0 0 5 10]\n";
}

void testPontryagin() {
  // auto u = [](double t) -> optimization::StatePoint<2> { return {1, 0}; };
  // constexpr double umin{-1};
  // constexpr double umax{1};

  // two_wheeled_robot::Model robot(u, 2, 1);
  // auto conjugate = [](const StaticTensor<3>& x, const StaticTensor<2>& u,
  //                     const StaticTensor<3>& psi,
  //                     double time) -> StateDerivativesPoint<3> {
  //   return {0, 0,
  //           -psi[0] * sin(x[2]) * (u[0] + u[1]) / 2 +
  //               psi[1] * cos(x[2]) * (u[0] + u[1]) / 2};
  // };
  // auto findMaximum = [](const StaticTensor<3>& x, const StaticTensor<3>& psi,
  //                       double) -> StaticTensor<2> {
  //   double ul;
  //   double ur;
  //   if (psi[0] * cos(x[2]) + psi[1] * sin(x[2]) + psi[2] > 0) {
  //     ul = umax;
  //   } else {
  //     ul = umin;
  //   }
  //   if (psi[0] * cos(x[2]) + psi[1] * sin(x[2]) - psi[2] > 0) {
  //     ur = umax;
  //   } else {
  //     ur = umin;
  //   }
  //   return {ul, ur};
  // };

  // double delta{0.01};
  // StaticTensor<3> x0{0, 0, 0};
  // StaticTensor<3> psi0{0, 0, 0};
  // StaticTensor<3> xf{0, 0, 0};
  // double curT{0};
  // double endT{100};
  // const auto solvedFun = solveDiffEqRungeKutte(curT, curX, robot, endT,
  // delta);

  // const auto solvedFcn =
  // PontryaginSolver(x0, psi0, robot, conjugate, findMaximum, xf);
}

void testEvolution() {
  auto fitness = [](const StaticTensor<5>& q) -> double {
    return 1 + std::pow(q[0] - 5, 2) + std::pow(q[1], 2) + std::pow(q[2], 2) +
           std::pow(q[3] - 5, 2) + std::pow(q[4] - 10, 2);
  };
  Evolution<5, 1000, 1000, decltype(fitness), 100> solver(fitness, -100, 100);
  const auto best{solver.solve(200)};
  std::cout << "Evolution: [" << best << "] True: [5 0 0 5 10]\n";
}

void testParticle() {
  auto fitness = [](const StaticTensor<5>& q) -> double {
    return 1 + std::pow(q[0] - 5, 2) + std::pow(q[1], 2) + std::pow(q[2], 2) +
           std::pow(q[3] - 5, 2) + std::pow(q[4] - 10, 2);
  };
  GrayWolfAlgorithm<5, decltype(fitness), 500, 5> solver(fitness, 100);
  const auto best{solver.solve(800)};
  std::cout << "Gray wolf: [" << best << "] True: [5 0 0 5 10]\n";
}

template <int N, int P = 10 * N>
void testGraySin(int iter) {
  auto fitness = [](const StaticTensor<1>& q) -> double {
    return 1 + std::sin(q[0]);
  };
  GrayWolfAlgorithm<1, decltype(fitness), P, N> solver(fitness, 100);
  const auto best{solver.solve(iter)};
  std::cout << "<" << N << ">, ", iter,
      ": " << best << " fit " << fitness(best) << "\n";
}

void testGraySin() {
  std::cout << "gray with different number of best wolfs\n <wolfs> iters: "
               "best_val fit fitness_val";
}
